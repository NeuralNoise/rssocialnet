for fun: ricebag button

todo: gxs general comment service


questions:

	- what about having one GxsMessageItem for forums and wall. A forum post and a wall post are very similar.
	  use the same for gxs-channel comments?

	- which source files should i read, where are the useful comments?
		C: hard to say. I suggest to start with RSWebUI on one side, and GXSidentity files on the RS side.

C: Here's a possible definition/concept for objects:
	* friends      => GXS ids
	* network node => PGP+SSL id = locations

C: We should start with something simple:
	- create a single service called "p3Wall", attached to a GXS id
	- the service will be provided by the plugin when launching RS. Therefore, in order to work, it needs an existing 
		location/PGP combination that provides such a GXS id, or it will create the GXS id the first time it is used
	- that GXS id can be anonymous, or attached to the current PGP key + location (e.g. to the current network node). 
		The user should be able to choose.


Symmetric sharing: two users get posts from each other
For this we need a symmetric relation. Friendship is such a relation.

Asymmetric sharing: one user publishes, others subscribe

Access restrictions: this is where pgp-ids become visible.
Maintain a list of gxs-ids with permissions. This leads to a gxs-circle.

Friends
Friendship is a symmetric relation. So friends receive posts from each other.
Need a list of friends. This list will be a gxs-circle. The circle gets distributed to the list of gxs-ids in it.
Everyone has a list with gxs-ids of friends.

If the service sees the own gxs-id on a incoming friendslist, then tell the user "friendship request from xy".

Interesting advatage, if friends are gxs-ids: it is much easier to make friends, and you can have hundreds of them without scaling issues.
Limitation: can only have gxs-id as friend when one of my connected neighbor servers has the same gxs-id as friends to. This is not a big problem in the real world: two friends often have same friends.


Facebook features
==================
Facebook has a nice documentation of its features:
https://www.facebook.com/help/www/219094928210454/

friendship is a relation for symmetric sharing
but you can sort your friends into lists, to not share everything with all friends

follow or subscribe is a feature which allows asymmetric sharing

Facebook is strong with linking actions together.
In Retroshare we don't have one global database, but many many small ones.
If we want to make links, then we have to put data into different gxs-groups


Wall Service
============
A wall is a place for and about a user. The user and his friends can post to a wall.
In Retroshare, a user is a gxs-id and a wall is a gxs-group.

When does a user subscribe to a wall to receive messages?
If two gxs-ids are friends, then they subscribe to each others Wall.
So friendslist has two purposes: 1. define who can receive a private Wall 2. to know which walls the system should subscribe to
This is even cooler: the circle as friendslist will be synced between locations by gxs
How do we detect a valid friendship?
only if both identities have each other in a friend-circle, then a friendship is valid.
if not, there has to be a message like "friendship denied"

What about private/public wall?
A private wall is visible to friends only.
A public wall is visible to everyone who can reach it.
Maybe we have two wall groups inside the service: one private which is limited to a circle of friends, and a public one without limitations
Then merge results from private and public group.
This could be extended to let different friends see different walls.
But who will subscribe and spread my public wall?
I don't want to subscribe to all public profiles, because i never can read them.
We should subscribe to all needed resources, but not the unneeded. When is a ressource needed?

What data is stored in a wall message?
- GxsMessageMeta
- text
- images

Things to make it look nice
- user defined profile image

How will a wall message look like?
Copy facebook or diaspora. This is good for the users and easy for me.

Have a profile section, where the user can describe his interests?
It would be good to see a public profile without being gxs-id friends or pgp-id connected.

What about passing on public messages?
This is like a manual turtle router: if i think some public post of a friend is nice, then i put on my own wall.

Mapping wall messages onto gxs
------------------------------
- the services defines rules for messages signing
this defines how a message has to be signed to confirm authenticity
rsgxsflags.h
    static const uint8_t MSG_AUTHEN_MASK = 0x0f;

    static const uint8_t MSG_AUTHEN_ROOT_PUBLISH_SIGN = 0x01;

    static const uint8_t MSG_AUTHEN_CHILD_PUBLISH_SIGN = 0x02;

    static const uint8_t MSG_AUTHEN_ROOT_AUTHOR_SIGN = 0x04;

    static const uint8_t MSG_AUTHEN_CHILD_AUTHOR_SIGN = 0x08;

root = parentId is empty
PUBLISH = sign with group key
AUTHOR = sign with gxs-id

these flags are set at creation time of genexchange
there are different rules for different privacy of groups

enum PrivacyBitPos { PUBLIC_GRP_BITS, RESTRICTED_GRP_BITS, PRIVATE_GRP_BITS, GRP_OPTION_BITS } ; (rsgenexchange.h)


- the group has visibility/access rules through circles
rsgxsdata.h
RsGxsGrpMetaData.mCircleId
RsGxsGrpMetaData.mCircleType	can have this values from gxscircles.h
#define GXS_CIRCLE_TYPE_PUBLIC            0x0001
#define GXS_CIRCLE_TYPE_EXTERNAL          0x0002
#define GXS_CIRCLE_TYPE_YOUREYESONLY      0x0003
#define GXS_CIRCLE_TYPE_LOCAL		  0x0004

RsGxsGrpMetaData.mGroupFlags
mGroupFlags can have these bits set:
rsgxsflags.h
    // pub key encrypted
    static const uint32_t FLAG_PRIVACY_PRIVATE = 0x00000001;

    // publish private key needed to publish
    static const uint32_t FLAG_PRIVACY_RESTRICTED = 0x00000002;

    // anyone can publish, publish key pair not needed
    static const uint32_t FLAG_PRIVACY_PUBLIC = 0x00000004;

this is related to the PrivacyBitPos enum above. mGroupFlags defines which set of authen flags to use

have to take care of different layers of gxs-metadata classes
rsgxsifacetypes.h	for frontend
rsgxsdata.h		for backend


there are more flags defined in GxsGroupDialog
why? what are they good for?
what is mSignFlags in groupMeta good for? where is this used?
looks like all this is unused

chris:
-------
A simple model of an fb wall

Wall ----> Group signed/hosted by author
    Threads ----> Messages signed by author
            Replies ----> Messages signed by author with thead parent id

Another model is a static wall associated strongly to a user FB account ("RS wall") which is not a group id. And simply have the threads be groups.
-------

Model 1
-------
Wall -> groups signed by author
  Threads -> messages signed by author
    Replies -> messages signed by author with thread parent id

make two groups per wall: one public group, and one for friends only
then merge the results

can only download whole wall at once
so have to copy content from wall to wall to spread single pieces
copying content is not a good idea, because then the thread is lost

Model 2
-------
Wall -> display a selection of posts from different groups
  Threads -> Groups signed by author
    Replies -> messages in the group

advantage: different threads can spread in different directions and different depths
we don't need to dowload a whole wall just because of one interesting thread
this enables to subscribe to a single thread by "like-ing" it

the way back is dificult: what, if someone wants to post on a wall of a non-friend?
make a group signed by author and add the id of the author on whose wall the post should appear
all the friends and followers will subscribe to this group and transport the thread to the wall owner

list of threads to subscribe:
- threads from friends
- threads from gxs-ids i follow (asymetric sharing)
- threads where friends have posted to, or where friends have pressed the like button
   how can we know this without subscribing to the thead and downloading it?
   maybe we need a combination of model one and two
   everyone has a group for its gxs-id an puts only info about other groups into it


Private Messages
================
- private chat and chatlobbies
	* C: arg. Chat is based on SSL ids. That is contradictory. And we cannot use distant chat. I think that chat should
		be suspended for now until we find a proper system.
- private distant chat/messages
	* C: => distant messages between GXS ids.

Idea: create a status service for gxs-ids
status is a volatile value like online, offline
status gets distributed to and by all contacts in the friendslist circle


What do users want? What do they expect from social networks?
=============================================================

german text comparing social networks:
http://www.edition1.net/rs7/da/soziale_netze.pdf

figure 3.2 looks like this:

##                  games
###                 docs
#####               share files
#####               get to know others
########            group organizing
########            share pictures
############        decide when and where to meet
#################   stay in contact with friends
##################  news

#################### 100%

A wall service is good for news, to stay in contact and to announce meetings.
No surprise: facebook has a wall.
Maybe just offer the same services as facebook, because facebook should know what they are doing.


some slides:
http://www.slideshare.net/PetterB/why-people-use-social-networkign-sites

slide 13: reasons to stop using social networks
- usability
- content
- people

We have to make things simple. (Not really a new idea)

slide 19: motivations to use a social network
- new relations
- friends
- socializing = sharing of experiences, small-talk, being part of something (slide 25)

How can we make it possible to learn about new people?
To learn about new people, a public profile is needed.
This is important in the first-use phase.
We need to make sure that every user has a connection to the network very fast.

sharing of experiences: the like button serves this purpose: i see the same things as my friends, i like the same things as my friends



Unsorted
========
- need accessible use on desktop. don't confuse the user with to much gxs-..., turtle, discovery, ...
  this is a general challenge of Retroshare v0.6

- need better support for retroshare-nogui, to use on raspberry pi, NAS, ArkOS, freedombox, ...
  previous work is in my github repo: https://github.com/electron128/retroshare

v0.5.5-daemon
Fork retroshare-nogui to background and allow automatic start at boot. (Linux only)

v0.5.5-mmi
"mmi" is short for machine-machine-interface. It adds command line parameters, which allow managment of identities and locations with retroshare-nogui.

v0.5.5-pluginparam
Small patch to pass the port for rswebui as commandline parameter.



From the users point of view
----------------------------
- first and most important: add friends
	* C: two different concepts here:
		1 - friend nodes for network communication: SSL ids in Retroshare network.
		2 - friends as in circles of friends: GXS ids.

	I think we should expose only 2 as "Friends". Communication peers (e.g. SSL ids) should be shown as "neighbor servers", 
	or "network".

	In a way, we should display the PGP+SSL friend connections as an underlying network layer that is able to route the
	data. The real friends are the GXS identities around, that go floating in
	that network.

- list and edit contacts. There are different kinds of people: friends, friends-of-friends, other known identities
	* C: these willbe GXS ids

- prevent adding of wrong friends with fake names: need to verify friends and prevent malicious keys in the keyring
	* this works based on PGP signatures. 
- one to many and many-to-many communication
  it should be obvious to see which people the post can reach.
- maybe you are fine if the content is shared network wide, but you don't want to expose your name
  others have to repost the content, or we need a pseudonymous identity
- notification about new posts
- different types of content: text, images, maybe files
- want to vote for content, or recommend them to others?
- some sort of group feature: a list of persons which share common interests
  want to send a message to the group members

Other networks/projects
  * facebook
		facebook has algorithms to rank content and show only the top content

		nice explanation of facebooks wall:
		http://www.harmonenterprises.com/blog/coaching/facebooks-wall-vs-news-feed-explained


  * diaspora
      adressing used in diaspora:
		#keyword
		@username

  * friendica


What happens when a user makes a post?

A user will upload some content like a short text or image.
Then we have to sort this content into gxs.
If the post is a reply, then things are simple: the content has to go the reverse way. And it will show up below the original post.
What will happen if the post is a head?
We need to have a context in which the post is created. The context defines who can read the post.
In tradiditional channels and forums this is obvious.

Every post needs a context. A context is the thing around the post. Like a channel name or forum name.
Maybe it is possible to have a post without context? This would be a post in nowhere.

	C: I think the context is the wall, as defined above. 

Retroshare: what is there

location, pgp-key, gxs-identity
don't want to ask the user too many questions at start
-> create pgp-key and gxs-identity with same name at start

gxs-identities
- everyone needs at least one gxs-identity
- what about voting for ids?
gxs-service
- user does not have to know about service ids and services
gxs-group
- this gives us a set of messages where one can subscribe to
- subscribe by hand, or automated by a set of rules? There are certainly some messages where you don't want to subscribe by hand
gxs-message
gxs-circles
- circles bring gxs-groups from different gxs-services together
  gxs-group points to circle
gxs-forums
gxs-channels
gxs-wiki
gxs-posted


retroshare/rswire.h
- twitter like service
- https://dev.twitter.com/docs/platform-objects

retroshare uses schema like this:
service->group->message

maybe this would be cleaner:
group->service->message

to make all ressources for a certain group of people, for a certain topic, available at one place
maybe make a news section for a group of people
example: there is a group of people doing x together. They want to share information only with members of their group and with no one else. To share information, there could be things like a forum, a wiki, a calendar.
Such a group of people would provide a context for message distribution.



Security
========
ssl as transport
login: name+password
key based login would be more secure.

how can we prevent guessing of login data?
http://lists.alioth.debian.org/pipermail/freedombox-discuss/2014-March/006192.html
http://bsdly.blogspot.no/search/label/Hail%20Mary%20Cloud
"The Hail Mary Cloud was a widely distributed, low intensity password guessing botnet that targeted Secure Shell (ssh) servers on the public Internet."

- limit login to whitelisted ip ranges?
	* that is totally possible to do in Wt (See RsWebUI)

- never ever send untrusted html to the browser
  use plain text for first and rely on wt to do the filtering
  	* C: I think that Wt does the filtering, in particular it is 
- jpg, png, gif is safe? do we have to verify the file type before sending data to the browser?
- what about svg?
	* C: no svg!! Too dangerous.

trouble with different passwords:
- ssl-password: ok, this is hidden from the user
- pgp-password
- password for login on webpage
	* C: that password should be a parameter of the plugin, possibly from a 




Milestones and tasks
====================

Retroshare Side
---------------

- access gxs from plugins
- edit circles
- wishlist: private chat to gxs-id


Plugin Side
-----------

order of classes
- data structure of post
- interface for frontend
- ui classes
- backend
- messages is independent and can be done if i'm stuck at other places

- take plugin structure from RsWebUI, change name and description
- p3WallService
	- interface: rswall.h
	- serialiser for wall posts
	- create a identity/wall
	- handle wall posts
	- handle friendslists
- main view build out of widgets
- UI to create a new Identity/Wall
- UI to add/list/remove node connections, where connection = pgp-id, ssl-id
- UI to add/list/remove friends, where friend = gxs-id
- newsfeed with different feed items
- widget to display a single wall message
- widget to view a wall discussion thread
- wall view
- send, list and view messages



Interesting comments in the source
==================================

rsgixs.h
about identities

p3gxscircles.h
p3gxscircles.cc
info about gxs-circles


